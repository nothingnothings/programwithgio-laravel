









AGORA FALAREMOS SOBRE O MVC PATTERN, E SOBRE COMO ELE FUNCIONA, NO LARAVEL...



MODEL VIEW CONTROLLER...











-> REPRESENTA ARQUITETURA QUE SEPARA A DATA 
E BUSINESS LOGIC DA PRESENTATION LAYER...













MODEL --> HANDLES BUSINESS LOGIC...


            HANDLES THE DATA OF THE APPLICATION...



            IT CAN PROCESS AND STORE DATA THAT COULD 
            BE STORED IN A DB OR ANY OTHER STORAGE SYSTEM/DATA STRUCTURE...








MODEL --> BUSINESS LOGIC, DATA E DATA MANAGEMENT DO APP...










MODEL -> TIPICAMENTE SE COMUNICA COM O CONTROLLER,
        MAS ELE TAMBÉM PODE SE COMUNICAR COM A VIEW, A DEPENDER DO CASO...









MODEL --> NO LARAVEL,
        O MODEL É O CORAÇÃO 
        DO BUSINESS LOGIC DO SEU APP...
        É RESPONSÁVEL PELO MANAGE DA DATA,
        QUERIES E BUSINESS RULES...


        REPRESENTA SUAS DATA STRUCTURES, E HANDLA 

        A DATA INTERACTION... TIPICAMENTE COM 

        DATABASES 


        COMO MYSQL...











--> O LARAVEL USA 1 ORM CHAMADO DE 'ELOQUENT',

    QUE BASICAMENTE ABSTRAÍ TODA A INTERAÇÃO COM O DATABASE,

    USANDO 


    O CHAMADO 'ACTIVE RECORD PATTERN'...












--> DEPOIS DISSO, TEMOS A VIEW...










-> A VIEW É 'ALL ABOUT THE PRESENTATION'...

CONTÉM O HTML, CSS E JAVASCRIPT... 








--> NO LARAVEL, AS VIEWS SÃO TIPICAMENTE CONSTRUÍDAS COM 


A BLADE TEMPLATING ENGINE,

QUE É UMA TOOL BEM PODEROSA...







-> NOS DEIXA LIDAR COM CÓDIGO PHP,

MAS TUDO DENTRO DO HTML, COM FUNCIONALIDADES EXTRAS (DIRECTIVES)...












--> FINALMENTE, TEMOS O CONTROLLER, 

    QUE EXISTE ENTRE AS VIEWS E OS MODELS...




    ELE HANDLA USER REQUESTS, PROCESSA ELES, POR MEIO DO TALK COM MODELS,

    E AÍ 

    ENVIA A DATA DE VOLTA AOS BROWSERS,

    POR MEIO DO LOAD DAS VIEWS... 



    --> É NOS CONTROLLERS QUE 

    BASICAMENTE ESCREVEMOS CÓDIGO QUE HANDLA O USER INPUT,

    A INTERAÇÃO COM O USER...










--> QUANDO 1 USER REALIZA 1 ACTION, COMO O SUBMIT DE 1 FORM,

O REQUEST É CAPTURADO PELO ROUTER DO LARAVEL,


AÍ PASSA POR MIDDLEWARES,


E AÍ CHEGA AO CONTROLLER APROPRIADO... O CONTROLLER ENTÃO VALIDA A DATA,


E DEPOIS PASSA A DATA AO MODEL, QUE VAI RETRIEVE/STORE A DATA,

PARA ENTÃO,

FINALMENTE,
PREPARAR 

1 RESPONSE... ESSA RESPONSE SERÁ OU:



1) HTML COM DATA (VIEW)



2) JSON...








LARAVEL TAMBÉM PODE RETORNAR JSON OU OUTROS TIPOS DE RESPONSES,

PARA APIs...














MVC --> HELPS US ORGANIZE LARAVEL APPS,
        THROUGH THE SEPARATION OF 

        LOGIC, DATA AND PRESENTATION...











    ISSO NOS DEIXA MELHOR O DEBUG E SCALE...









-> PODEMOS DIVIDIR CADA PARTE, O M V E C,



AINDA MAIS,


EM SUBLAYERS,



POR MEIO DE OUTROS PATTERNS,

COMO 



'VALIDATION', 'MIDDLEWARE' E 'DATABASE ABSTRACTION'... (são exemplos de subdivision)...











CERTO...







-> AGORA VAMOS VER O CÓDIGO DE VERDADE...